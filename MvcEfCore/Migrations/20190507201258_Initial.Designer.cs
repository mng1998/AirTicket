// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MvcEfCore.Data;

namespace MvcEfCore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190507201258_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MvcEfCore.Models.ChiTietTrungGian", b =>
                {
                    b.Property<string>("ChiTietID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10);

                    b.Property<string>("ChuyenBayID");

                    b.Property<string>("GhiChu");

                    b.Property<string>("SanBayDen");

                    b.Property<string>("SanBayId");

                    b.Property<int?>("ThoiGian");

                    b.HasKey("ChiTietID");

                    b.HasIndex("ChuyenBayID");

                    b.HasIndex("SanBayId");

                    b.ToTable("ChiTietTrungGians");
                });

            modelBuilder.Entity("MvcEfCore.Models.HangVe", b =>
                {
                    b.Property<string>("HangID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5);

                    b.Property<string>("TenHang");

                    b.Property<int>("TiLeGia");

                    b.HasKey("HangID");

                    b.ToTable("HangVes");
                });

            modelBuilder.Entity("MvcEfCore.Models.KhachHang", b =>
                {
                    b.Property<string>("KhachHangID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30);

                    b.Property<string>("CMND");

                    b.Property<string>("DiaChi");

                    b.Property<string>("Password");

                    b.Property<string>("SDT");

                    b.Property<string>("TenKhachHang");

                    b.Property<string>("UserName");

                    b.HasKey("KhachHangID");

                    b.ToTable("KhachHangs");
                });

            modelBuilder.Entity("MvcEfCore.Models.LichChuyenBay", b =>
                {
                    b.Property<string>("ChuyenBayID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10);

                    b.Property<int>("GiaVe");

                    b.Property<DateTime>("NgayGioBay");

                    b.Property<int>("SoGheHang1");

                    b.Property<int>("SoGheHang2");

                    b.Property<int>("ThoiGianBay");

                    b.Property<bool>("Trangthai");

                    b.HasKey("ChuyenBayID");

                    b.ToTable("LichChuyenBays");
                });

            modelBuilder.Entity("MvcEfCore.Models.PhieuDatCho", b =>
                {
                    b.Property<string>("PhieuDatChoID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ChuyenBayID");

                    b.Property<double>("GiaTien");

                    b.Property<string>("HangID");

                    b.Property<string>("KhachHangID");

                    b.HasKey("PhieuDatChoID");

                    b.HasIndex("ChuyenBayID");

                    b.HasIndex("HangID");

                    b.HasIndex("KhachHangID");

                    b.ToTable("PhieuDatChos");
                });

            modelBuilder.Entity("MvcEfCore.Models.PhieuDatVe", b =>
                {
                    b.Property<string>("PhieuDatVeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ChuyenBayID");

                    b.Property<int>("GiaTien");

                    b.Property<string>("HangID");

                    b.Property<string>("KhachHangID");

                    b.Property<bool>("TrangThai");

                    b.HasKey("PhieuDatVeID");

                    b.HasIndex("ChuyenBayID");

                    b.HasIndex("HangID");

                    b.HasIndex("KhachHangID");

                    b.ToTable("PhieuDatVes");
                });

            modelBuilder.Entity("MvcEfCore.Models.SanBay", b =>
                {
                    b.Property<string>("SanBayId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(6);

                    b.Property<string>("TenSanBay")
                        .IsRequired();

                    b.Property<string>("ThanhPho");

                    b.HasKey("SanBayId");

                    b.ToTable("SanBays");
                });

            modelBuilder.Entity("MvcEfCore.Models.ThamSo", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("GhiChu");

                    b.Property<int>("GiaTri");

                    b.HasKey("Id");

                    b.ToTable("ThamSos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MvcEfCore.Models.ChiTietTrungGian", b =>
                {
                    b.HasOne("MvcEfCore.Models.LichChuyenBay", "LichChuyenBay")
                        .WithMany("ChiTietTrungGians")
                        .HasForeignKey("ChuyenBayID");

                    b.HasOne("MvcEfCore.Models.SanBay", "SanBay")
                        .WithMany("ChiTietTrungGians")
                        .HasForeignKey("SanBayId");
                });

            modelBuilder.Entity("MvcEfCore.Models.PhieuDatCho", b =>
                {
                    b.HasOne("MvcEfCore.Models.LichChuyenBay", "LichChuyenBay")
                        .WithMany("PhieuDatChos")
                        .HasForeignKey("ChuyenBayID");

                    b.HasOne("MvcEfCore.Models.HangVe", "HangVe")
                        .WithMany("PhieuDatChos")
                        .HasForeignKey("HangID");

                    b.HasOne("MvcEfCore.Models.KhachHang", "KhachHang")
                        .WithMany("PhieuDatChos")
                        .HasForeignKey("KhachHangID");
                });

            modelBuilder.Entity("MvcEfCore.Models.PhieuDatVe", b =>
                {
                    b.HasOne("MvcEfCore.Models.LichChuyenBay", "LichChuyenBay")
                        .WithMany("PhieuDatVes")
                        .HasForeignKey("ChuyenBayID");

                    b.HasOne("MvcEfCore.Models.HangVe", "HangVe")
                        .WithMany("PhieuDatVes")
                        .HasForeignKey("HangID");

                    b.HasOne("MvcEfCore.Models.KhachHang", "KhachHang")
                        .WithMany("PhieuDatVes")
                        .HasForeignKey("KhachHangID");
                });
#pragma warning restore 612, 618
        }
    }
}
